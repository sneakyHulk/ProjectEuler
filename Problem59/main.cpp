#include <algorithm>
#include <array>
#include <iostream>
#include <limits>
#include <queue>
#include <ranges>
#include <sstream>
#include <unordered_map>
#include <vector>

std::array const cipher = std::to_array<char>(
    {36, 22, 80, 0,  0,  4,  23, 25, 19, 17, 88, 4,  4,  19, 21, 11, 88, 22, 23,
     23, 29, 69, 12, 24, 0,  88, 25, 11, 12, 2,  10, 28, 5,  6,  12, 25, 10, 22,
     80, 10, 30, 80, 10, 22, 21, 69, 23, 22, 69, 61, 5,  9,  29, 2,  66, 11, 80,
     8,  23, 3,  17, 88, 19, 0,  20, 21, 7,  10, 17, 17, 29, 20, 69, 8,  17, 21,
     29, 2,  22, 84, 80, 71, 60, 21, 69, 11, 5,  8,  21, 25, 22, 88, 3,  0,  10,
     25, 0,  10, 5,  8,  88, 2,  0,  27, 25, 21, 10, 31, 6,  25, 2,  16, 21, 82,
     69, 35, 63, 11, 88, 4,  13, 29, 80, 22, 13, 29, 22, 88, 31, 3,  88, 3,  0,
     10, 25, 0,  11, 80, 10, 30, 80, 23, 29, 19, 12, 8,  2,  10, 27, 17, 9,  11,
     45, 95, 88, 57, 69, 16, 17, 19, 29, 80, 23, 29, 19, 0,  22, 4,  9,  1,  80,
     3,  23, 5,  11, 28, 92, 69, 9,  5,  12, 12, 21, 69, 13, 30, 0,  0,  0,  0,
     27, 4,  0,  28, 28, 28, 84, 80, 4,  22, 80, 0,  20, 21, 2,  25, 30, 17, 88,
     21, 29, 8,  2,  0,  11, 3,  12, 23, 30, 69, 30, 31, 23, 88, 4,  13, 29, 80,
     0,  22, 4,  12, 10, 21, 69, 11, 5,  8,  88, 31, 3,  88, 4,  13, 17, 3,  69,
     11, 21, 23, 17, 21, 22, 88, 65, 69, 83, 80, 84, 87, 68, 69, 83, 80, 84, 87,
     73, 69, 83, 80, 84, 87, 65, 83, 88, 91, 69, 29, 4,  6,  86, 92, 69, 15, 24,
     12, 27, 24, 69, 28, 21, 21, 29, 30, 1,  11, 80, 10, 22, 80, 17, 16, 21, 69,
     9,  5,  4,  28, 2,  4,  12, 5,  23, 29, 80, 10, 30, 80, 17, 16, 21, 69, 27,
     25, 23, 27, 28, 0,  84, 80, 22, 23, 80, 17, 16, 17, 17, 88, 25, 3,  88, 4,
     13, 29, 80, 17, 10, 5,  0,  88, 3,  16, 21, 80, 10, 30, 80, 17, 16, 25, 22,
     88, 3,  0,  10, 25, 0,  11, 80, 12, 11, 80, 10, 26, 4,  4,  17, 30, 0,  28,
     92, 69, 30, 2,  10, 21, 80, 12, 12, 80, 4,  12, 80, 10, 22, 19, 0,  88, 4,
     13, 29, 80, 20, 13, 17, 1,  10, 17, 17, 13, 2,  0,  88, 31, 3,  88, 4,  13,
     29, 80, 6,  17, 2,  6,  20, 21, 69, 30, 31, 9,  20, 31, 18, 11, 94, 69, 54,
     17, 8,  29, 28, 28, 84, 80, 44, 88, 24, 4,  14, 21, 69, 30, 31, 16, 22, 20,
     69, 12, 24, 4,  12, 80, 17, 16, 21, 69, 11, 5,  8,  88, 31, 3,  88, 4,  13,
     17, 3,  69, 11, 21, 23, 17, 21, 22, 88, 25, 22, 88, 17, 69, 11, 25, 29, 12,
     24, 69, 8,  17, 23, 12, 80, 10, 30, 80, 17, 16, 21, 69, 11, 1,  16, 25, 2,
     0,  88, 31, 3,  88, 4,  13, 29, 80, 21, 29, 2,  12, 21, 21, 17, 29, 2,  69,
     23, 22, 69, 12, 24, 0,  88, 19, 12, 10, 19, 9,  29, 80, 18, 16, 31, 22, 29,
     80, 1,  17, 17, 8,  29, 4,  0,  10, 80, 12, 11, 80, 84, 67, 80, 10, 10, 80,
     7,  1,  80, 21, 13, 4,  17, 17, 30, 2,  88, 4,  13, 29, 80, 22, 13, 29, 69,
     23, 22, 69, 12, 24, 12, 11, 80, 22, 29, 2,  12, 29, 3,  69, 29, 1,  16, 25,
     28, 69, 12, 31, 69, 11, 92, 69, 17, 4,  69, 16, 17, 22, 88, 4,  13, 29, 80,
     23, 25, 4,  12, 23, 80, 22, 9,  2,  17, 80, 70, 76, 88, 29, 16, 20, 4,  12,
     8,  28, 12, 29, 20, 69, 26, 9,  69, 11, 80, 17, 23, 80, 84, 88, 31, 3,  88,
     4,  13, 29, 80, 21, 29, 2,  12, 21, 21, 17, 29, 2,  69, 12, 31, 69, 12, 24,
     0,  88, 20, 12, 25, 29, 0,  12, 21, 23, 86, 80, 44, 88, 7,  12, 20, 28, 69,
     11, 31, 10, 22, 80, 22, 16, 31, 18, 88, 4,  13, 25, 4,  69, 12, 24, 0,  88,
     3,  16, 21, 80, 10, 30, 80, 17, 16, 25, 22, 88, 3,  0,  10, 25, 0,  11, 80,
     17, 23, 80, 7,  29, 80, 4,  8,  0,  23, 23, 8,  12, 21, 17, 17, 29, 28, 28,
     88, 65, 75, 78, 68, 81, 65, 67, 81, 72, 70, 83, 64, 68, 87, 74, 70, 81, 75,
     70, 81, 67, 80, 4,  22, 20, 69, 30, 2,  10, 21, 80, 8,  13, 28, 17, 17, 0,
     9,  1,  25, 11, 31, 80, 17, 16, 25, 22, 88, 30, 16, 21, 18, 0,  10, 80, 7,
     1,  80, 22, 17, 8,  73, 88, 17, 11, 28, 80, 17, 16, 21, 11, 88, 4,  4,  19,
     25, 11, 31, 80, 17, 16, 21, 69, 11, 1,  16, 25, 2,  0,  88, 2,  10, 23, 4,
     73, 88, 4,  13, 29, 80, 11, 13, 29, 7,  29, 2,  69, 75, 94, 84, 76, 65, 80,
     65, 66, 83, 77, 67, 80, 64, 73, 82, 65, 67, 87, 75, 72, 69, 17, 3,  69, 17,
     30, 1,  29, 21, 1,  88, 0,  23, 23, 20, 16, 27, 21, 1,  84, 80, 18, 16, 25,
     6,  16, 80, 0,  0,  0,  23, 29, 3,  22, 29, 3,  69, 12, 24, 0,  88, 0,  0,
     10, 25, 8,  29, 4,  0,  10, 80, 10, 30, 80, 4,  88, 19, 12, 10, 19, 9,  29,
     80, 18, 16, 31, 22, 29, 80, 1,  17, 17, 8,  29, 4,  0,  10, 80, 12, 11, 80,
     84, 86, 80, 35, 23, 28, 9,  23, 7,  12, 22, 23, 69, 25, 23, 4,  17, 30, 69,
     12, 24, 0,  88, 3,  4,  21, 21, 69, 11, 4,  0,  8,  3,  69, 26, 9,  69, 15,
     24, 12, 27, 24, 69, 49, 80, 13, 25, 20, 69, 25, 2,  23, 17, 6,  0,  28, 80,
     4,  12, 80, 17, 16, 25, 22, 88, 3,  16, 21, 92, 69, 49, 80, 13, 25, 6,  0,
     88, 20, 12, 11, 19, 10, 14, 21, 23, 29, 20, 69, 12, 24, 4,  12, 80, 17, 16,
     21, 69, 11, 5,  8,  88, 31, 3,  88, 4,  13, 29, 80, 22, 29, 2,  12, 29, 3,
     69, 73, 80, 78, 88, 65, 74, 73, 70, 69, 83, 80, 84, 87, 72, 84, 88, 91, 69,
     73, 95, 87, 77, 70, 69, 83, 80, 84, 87, 70, 87, 77, 80, 78, 88, 21, 17, 27,
     94, 69, 25, 28, 22, 23, 80, 1,  29, 0,  0,  22, 20, 22, 88, 31, 11, 88, 4,
     13, 29, 80, 20, 13, 17, 1,  10, 17, 17, 13, 2,  0,  88, 31, 3,  88, 4,  13,
     29, 80, 6,  17, 2,  6,  20, 21, 75, 88, 62, 4,  21, 21, 9,  1,  92, 69, 12,
     24, 0,  88, 3,  16, 21, 80, 10, 30, 80, 17, 16, 25, 22, 88, 29, 16, 20, 4,
     12, 8,  28, 12, 29, 20, 69, 26, 9,  69, 65, 64, 69, 31, 25, 19, 29, 3,  69,
     12, 24, 0,  88, 18, 12, 9,  5,  4,  28, 2,  4,  12, 21, 69, 80, 22, 10, 13,
     2,  17, 16, 80, 21, 23, 7,  0,  10, 89, 69, 23, 22, 69, 12, 24, 0,  88, 19,
     12, 10, 19, 16, 21, 22, 0,  10, 21, 11, 27, 21, 69, 23, 22, 69, 12, 24, 0,
     88, 0,  0,  10, 25, 8,  29, 4,  0,  10, 80, 10, 30, 80, 4,  88, 19, 12, 10,
     19, 9,  29, 80, 18, 16, 31, 22, 29, 80, 1,  17, 17, 8,  29, 4,  0,  10, 80,
     12, 11, 80, 84, 86, 80, 36, 22, 20, 69, 26, 9,  69, 11, 25, 8,  17, 28, 4,
     10, 80, 23, 29, 17, 22, 23, 30, 12, 22, 23, 69, 49, 80, 13, 25, 6,  0,  88,
     28, 12, 19, 21, 18, 17, 3,  0,  88, 18, 0,  29, 30, 69, 25, 18, 9,  29, 80,
     17, 23, 80, 1,  29, 4,  0,  10, 29, 12, 22, 21, 69, 12, 24, 0,  88, 3,  16,
     21, 3,  69, 23, 22, 69, 12, 24, 0,  88, 3,  16, 26, 3,  0,  9,  5,  0,  22,
     4,  69, 11, 21, 23, 17, 21, 22, 88, 25, 11, 88, 7,  13, 17, 19, 13, 88, 4,
     13, 29, 80, 0,  0,  0,  10, 22, 21, 11, 12, 3,  69, 25, 2,  0,  88, 21, 19,
     29, 30, 69, 22, 5,  8,  26, 21, 23, 11, 94});

class ArrayHasher {
public:
  template <typename TYPE, std::size_t SIZE>
  std::size_t operator()(std::array<TYPE, SIZE> const &arr) const {
    std::size_t h = 0;
    for (TYPE const e : arr) {
      h ^= std::hash<TYPE>{}(e) + 0x9e3779b9 + (h << 6) + (h >> 2);
    }
    return h;
  }
};

std::unordered_map<std::array<char, 2>, float, ArrayHasher> digraphs = {
    {{'E', ' '}, 0.0319}, {{' ', 'T'}, 0.0282}, {{'T', 'H'}, 0.0238},
    {{'H', 'E'}, 0.0238}, {{'D', ' '}, 0.0196}, {{' ', 'A'}, 0.0194},
    {{'T', ' '}, 0.0170}, {{'S', ' '}, 0.0158}, {{'I', 'N'}, 0.0146},
    {{' ', 'S'}, 0.0141}, {{' ', 'H'}, 0.0138}, {{'E', 'R'}, 0.0130},
    {{'A', 'N'}, 0.0127}, {{' ', 'W'}, 0.0126}, {{',', ' '}, 0.0118},
    {{' ', 'I'}, 0.0115}, {{'N', ' '}, 0.0113}, {{' ', ' '}, 0.0109},
    {{'R', 'E'}, 0.0108}, {{' ', 'O'}, 0.0106}, {{'E', 'D'}, 0.0094},
    {{'O', 'U'}, 0.0092}, {{'N', 'D'}, 0.0089}, {{'R', ' '}, 0.0088},
    {{'H', 'A'}, 0.0085}, {{' ', 'B'}, 0.0084}, {{'O', 'N'}, 0.0084},
    {{'Y', ' '}, 0.0084}, {{'A', 'T'}, 0.0082}, {{'O', ' '}, 0.0079},
    {{'E', 'N'}, 0.0078}, {{' ', 'M'}, 0.0077}, {{'T', 'O'}, 0.0075},
    {{'N', 'G'}, 0.0074}, {{' ', 'C'}, 0.0073}, {{'H', 'I'}, 0.0069},
    {{'I', 'T'}, 0.0069}, {{' ', 'F'}, 0.0068}, {{'O', 'R'}, 0.0066},
    {{'A', 'S'}, 0.0065}, {{'A', 'R'}, 0.0064}, {{'S', 'T'}, 0.0062},
    {{'I', 'S'}, 0.0062}, {{'T', 'E'}, 0.0060}, {{'F', ' '}, 0.0058},
    {{' ', 'D'}, 0.0058}, {{'E', 'S'}, 0.0057}, {{'L', 'E'}, 0.0055},
    {{'V', 'E'}, 0.0054}, {{'G', ' '}, 0.0053}, {{'S', 'E'}, 0.0052},
    {{'O', 'F'}, 0.0052}, {{'M', 'E'}, 0.0051}, {{'E', 'A'}, 0.0051},
    {{' ', 'P'}, 0.0051}, {{'N', 'E'}, 0.0049}, {{' ', 'L'}, 0.0048},
    {{'A', 'L'}, 0.0048}, {{'L', 'L'}, 0.0047}, {{'A', ' '}, 0.0047},
    {{'N', 'T'}, 0.0047}, {{'W', 'A'}, 0.0046}, {{'T', 'I'}, 0.0043},
    {{'R', 'O'}, 0.0042}, {{'D', 'E'}, 0.0041}, {{' ', 'N'}, 0.0041},
    {{' ', 'R'}, 0.0040}, {{'B', 'E'}, 0.0040}, {{'L', ' '}, 0.0039},
    {{'N', 'O'}, 0.0039}, {{'H', ' '}, 0.0039}, {{'L', 'I'}, 0.0037},
    {{' ', 'G'}, 0.0037}, {{'R', 'I'}, 0.0036}, {{'C', 'O'}, 0.0036},
    {{'E', 'L'}, 0.0036}, {{'H', 'O'}, 0.0036}, {{' ', 'E'}, 0.0036},
    {{'A', 'D'}, 0.0035}, {{'U', 'T'}, 0.0034}, {{'e', ' '}, 0.0319},
    {{' ', 't'}, 0.0282}, {{'t', 'h'}, 0.0238}, {{'h', 'e'}, 0.0238},
    {{'d', ' '}, 0.0196}, {{' ', 'a'}, 0.0194}, {{'t', ' '}, 0.0170},
    {{'s', ' '}, 0.0158}, {{'i', 'n'}, 0.0146}, {{' ', 's'}, 0.0141},
    {{' ', 'h'}, 0.0138}, {{'e', 'r'}, 0.0130}, {{'a', 'n'}, 0.0127},
    {{' ', 'w'}, 0.0126}, {{' ', 'i'}, 0.0115}, {{'n', ' '}, 0.0113},
    {{'r', 'e'}, 0.0108}, {{' ', 'o'}, 0.0106}, {{'e', 'd'}, 0.0094},
    {{'o', 'u'}, 0.0092}, {{'n', 'd'}, 0.0089}, {{'r', ' '}, 0.0088},
    {{'h', 'a'}, 0.0085}, {{' ', 'b'}, 0.0084}, {{'o', 'n'}, 0.0084},
    {{'y', ' '}, 0.0084}, {{'a', 't'}, 0.0082}, {{'o', ' '}, 0.0079},
    {{'e', 'n'}, 0.0078}, {{' ', 'm'}, 0.0077}, {{'t', 'o'}, 0.0075},
    {{'n', 'g'}, 0.0074}, {{' ', 'c'}, 0.0073}, {{'h', 'i'}, 0.0069},
    {{'i', 't'}, 0.0069}, {{' ', 'f'}, 0.0068}, {{'o', 'r'}, 0.0066},
    {{'a', 's'}, 0.0065}, {{'a', 'r'}, 0.0064}, {{'s', 't'}, 0.0062},
    {{'i', 's'}, 0.0062}, {{'t', 'e'}, 0.0060}, {{'f', ' '}, 0.0058},
    {{' ', 'd'}, 0.0058}, {{'e', 's'}, 0.0057}, {{'l', 'e'}, 0.0055},
    {{'v', 'e'}, 0.0054}, {{'g', ' '}, 0.0053}, {{'s', 'e'}, 0.0052},
    {{'o', 'f'}, 0.0052}, {{'m', 'e'}, 0.0051}, {{'e', 'a'}, 0.0051},
    {{' ', 'p'}, 0.0051}, {{'n', 'e'}, 0.0049}, {{' ', 'l'}, 0.0048},
    {{'a', 'l'}, 0.0048}, {{'l', 'l'}, 0.0047}, {{'a', ' '}, 0.0047},
    {{'n', 't'}, 0.0047}, {{'w', 'a'}, 0.0046}, {{'t', 'i'}, 0.0043},
    {{'r', 'o'}, 0.0042}, {{'d', 'e'}, 0.0041}, {{' ', 'n'}, 0.0041},
    {{' ', 'r'}, 0.0040}, {{'b', 'e'}, 0.0040}, {{'l', ' '}, 0.0039},
    {{'n', 'o'}, 0.0039}, {{'h', ' '}, 0.0039}, {{'l', 'i'}, 0.0037},
    {{' ', 'g'}, 0.0037}, {{'r', 'i'}, 0.0036}, {{'c', 'o'}, 0.0036},
    {{'e', 'l'}, 0.0036}, {{'h', 'o'}, 0.0036}, {{' ', 'e'}, 0.0036},
    {{'a', 'd'}, 0.0035}, {{'u', 't'}, 0.0034}, {{'T', 'h'}, 0.0238},
    {{'H', 'e'}, 0.0238}, {{'I', 'n'}, 0.0146}, {{'E', 'r'}, 0.0130},
    {{'A', 'n'}, 0.0127}, {{'R', 'e'}, 0.0108}, {{'E', 'd'}, 0.0094},
    {{'O', 'u'}, 0.0092}, {{'N', 'd'}, 0.0089}, {{'H', 'a'}, 0.0085},
    {{'O', 'n'}, 0.0084}, {{'A', 't'}, 0.0082}, {{'E', 'n'}, 0.0078},
    {{'T', 'o'}, 0.0075}, {{'N', 'g'}, 0.0074}, {{'H', 'i'}, 0.0069},
    {{'I', 't'}, 0.0069}, {{'O', 'r'}, 0.0066}, {{'A', 's'}, 0.0065},
    {{'A', 'r'}, 0.0064}, {{'S', 't'}, 0.0062}, {{'I', 's'}, 0.0062},
    {{'T', 'e'}, 0.0060}, {{'E', 's'}, 0.0057}, {{'L', 'e'}, 0.0055},
    {{'V', 'e'}, 0.0054}, {{'S', 'e'}, 0.0052}, {{'O', 'f'}, 0.0052},
    {{'M', 'e'}, 0.0051}, {{'E', 'a'}, 0.0051}, {{'N', 'e'}, 0.0049},
    {{'A', 'l'}, 0.0048}, {{'L', 'l'}, 0.0047}, {{'N', 't'}, 0.0047},
    {{'W', 'a'}, 0.0046}, {{'T', 'i'}, 0.0043}, {{'R', 'o'}, 0.0042},
    {{'D', 'e'}, 0.0041}, {{'B', 'e'}, 0.0040}, {{'N', 'o'}, 0.0039},
    {{'L', 'i'}, 0.0037}, {{'R', 'i'}, 0.0036}, {{'C', 'o'}, 0.0036},
    {{'E', 'l'}, 0.0036}, {{'H', 'o'}, 0.0036}, {{'A', 'd'}, 0.0035},
    {{'U', 't'}, 0.0034}, {{'t', 'H'}, 0.0238}, {{'h', 'E'}, 0.0238},
    {{'i', 'N'}, 0.0146}, {{'e', 'R'}, 0.0130}, {{'a', 'N'}, 0.0127},
    {{'r', 'E'}, 0.0108}, {{'e', 'D'}, 0.0094}, {{'o', 'U'}, 0.0092},
    {{'n', 'D'}, 0.0089}, {{'h', 'A'}, 0.0085}, {{'o', 'N'}, 0.0084},
    {{'a', 'T'}, 0.0082}, {{'e', 'N'}, 0.0078}, {{'t', 'O'}, 0.0075},
    {{'n', 'G'}, 0.0074}, {{'h', 'I'}, 0.0069}, {{'i', 'T'}, 0.0069},
    {{'o', 'R'}, 0.0066}, {{'a', 'S'}, 0.0065}, {{'a', 'R'}, 0.0064},
    {{'s', 'T'}, 0.0062}, {{'i', 'S'}, 0.0062}, {{'t', 'E'}, 0.0060},
    {{'e', 'S'}, 0.0057}, {{'l', 'E'}, 0.0055}, {{'v', 'E'}, 0.0054},
    {{'s', 'E'}, 0.0052}, {{'o', 'F'}, 0.0052}, {{'m', 'E'}, 0.0051},
    {{'e', 'A'}, 0.0051}, {{'n', 'E'}, 0.0049}, {{'a', 'L'}, 0.0048},
    {{'l', 'L'}, 0.0047}, {{'n', 'T'}, 0.0047}, {{'w', 'A'}, 0.0046},
    {{'t', 'I'}, 0.0043}, {{'r', 'O'}, 0.0042}, {{'d', 'E'}, 0.0041},
    {{'b', 'E'}, 0.0040}, {{'n', 'O'}, 0.0039}, {{'l', 'I'}, 0.0037},
    {{'r', 'I'}, 0.0036}, {{'c', 'O'}, 0.0036}, {{'e', 'L'}, 0.0036},
    {{'h', 'O'}, 0.0036}, {{'a', 'D'}, 0.0035}, {{'u', 'T'}, 0.0034}};

template <class T> void hash_combine(size_t &seed, T const &v) {
  seed ^= hash_value(v) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}

auto decrypt(std::ranges::input_range auto &cipher,
             std::ranges::input_range auto &pw) {
  return std::ranges::views::zip_transform(
      [](auto const a, auto const b) -> char { return a ^ b; }, cipher,
      std::ranges::views::repeat(std::ranges::views::all(pw)) |
          std::ranges::views::join);
}
bool test_on_ascii_character(std::ranges::input_range auto &&decipher) {
  return !std::ranges::any_of(decipher, [](char const ch) {
    return (ch < 20 || ch > 127) && ch != 13 && ch != 10 && ch != 9;
  });
}

float test_on_single_chars(std::ranges::input_range auto &decipher) {
  static std::unordered_map<char, float> singles = {
      {' ', 0.1874}, {'E', 0.0960}, {'T', 0.0702},  {'A', 0.0621},
      {'O', 0.0584}, {'I', 0.0522}, {'N', 0.0521},  {'H', 0.0487},
      {'S', 0.0477}, {'R', 0.0443}, {'D', 0.0352},  {'L', 0.0320},
      {'U', 0.0225}, {'M', 0.0194}, {'C', 0.0188},  {'W', 0.0182},
      {'G', 0.0166}, {'F', 0.0162}, {'Y', 0.0156},  {'P', 0.0131},
      {',', 0.0124}, {'.', 0.0121}, {'B', 0.0119},  {'K', 0.0074},
      {'V', 0.0071}, {'"', 0.0067}, {'\'', 0.0044}, {'-', 0.0026},
      {'?', 0.0012}, {'X', 0.0012}, {'J', 0.0012},  {';', 0.0008},
      {'!', 0.0008}, {'Q', 0.0007}, {'Z', 0.0007},  {'e', 0.0960},
      {'t', 0.0702}, {'a', 0.0621}, {'o', 0.0584},  {'i', 0.0522},
      {'n', 0.0521}, {'h', 0.0487}, {'s', 0.0477},  {'r', 0.0443},
      {'d', 0.0352}, {'l', 0.0320}, {'u', 0.0225},  {'m', 0.0194},
      {'c', 0.0188}, {'w', 0.0182}, {'g', 0.0166},  {'f', 0.0162},
      {'y', 0.0156}, {'p', 0.0131}, {'b', 0.0119},  {'k', 0.0074},
      {'v', 0.0071}, {'x', 0.0012}, {'j', 0.0012},  {'q', 0.0007},
      {'z', 0.0007}};

  return std::ranges::fold_left(
      decipher | std::ranges::views::transform([](auto const a) -> float {
        return singles.contains(a) ? singles[a] : 0.f;
      }),
      0.f, std::plus<>());
}

float test_on_digraphs(std::ranges::input_range auto &&decipher) {
  auto c = decipher | std::ranges::views::slide(2);
  return std::ranges::fold_left(
      std::ranges::views::transform(
          decipher | std::ranges::views::slide(2) |
              std::ranges::views::as_rvalue,
          [](std::ranges::viewable_range auto &&a) -> float {
            std::array<char, 2> tmp;
            std::ranges::copy(a, tmp.begin());
            return digraphs.contains(tmp) ? digraphs[tmp] : 0.f;
          }),
      0.f, std::plus<>());
}

template <typename Key, typename Value>
class pair_priority_queue
    : public std::priority_queue<std::pair<Key, Value>,
                                 std::vector<std::pair<Key, Value>>,
                                 decltype([](std::pair<Key, Value> const &a,
                                             std::pair<Key, Value> const &b) {
                                   return a.first < b.first;
                                 })> {};

void print_range(std::ranges::range auto &&range) {
  for (auto e : range) {
    std::cout << e;
  }
  std::cout << std::endl;
}
std::string string_range(std::ranges::range auto &&range) {
  std::stringstream ss;
  for (auto e : range) {
    ss << e;
  }
  return ss.str();
}

template <typename tuple_t>
constexpr auto get_array_from_tuple(tuple_t &&tuple) {
  constexpr auto get_array = [](auto &&...x) {
    return std::array{std::forward<decltype(x)>(x)...};
  };
  return std::apply(get_array, std::forward<tuple_t>(tuple));
}

constexpr char operator""_ch(unsigned long long int num) { return num; }

int main() {
  pair_priority_queue<float, std::array<char, 3>> pq;

  for (auto e : std::ranges::views::cartesian_product(
           std::ranges::views::iota(0_ch) | std::ranges::views::take(256),
           std::ranges::views::iota(0_ch) | std::ranges::views::take(256),
           std::ranges::views::iota(0_ch) | std::ranges::views::take(256))) {
    auto pw = get_array_from_tuple(e);
    if (auto decipher = decrypt(cipher, pw);
        test_on_ascii_character(decipher)) {
      float singles_conformity = test_on_single_chars(decipher);
      auto digraphs_conformity = test_on_digraphs(decipher);
      float conformity = singles_conformity * digraphs_conformity;
      std::pair<float, std::array<char, 3>> p = std::make_pair(conformity, pw);
      pq.push(p);
    }
  }

  while (true) {
    auto const current = pq.top();
    auto const decipher = decrypt(cipher, current.second);
    print_range(decipher);
    std::cout << "Decipher has " << current.first << " points with password '"
              << string_range(current.second) << "'. This right? (y/n)"
              << std::flush;
    std::string decision;
    std::cin >> decision;
    if (decision != "y" && decision != "Y") {
      pq.pop();
      continue;
    }

    std::cout << std::ranges::fold_left(decipher, 0U, std::plus<>())
              << std::endl;
    break;
  }
}